#compdef terraform

# Potential improvements:
# - Better completion for plan files
# - Better completion for terraform config directories?
# - Completion for resources
# - completion for variables?

_terraform_cmds() {
  local cmds=(
    'init:Initialize a Terraform working directory'
    'validate:Validates the Terraform files'
    'plan:Generate and show an execution plan'
    'apply:Builds or changes infrastructure'
    'destroy:Destroy Terraform-managed infrastructure'

    'console:Interactive console for Terraform interpolations'
    'fmt:Rewrites config files to canonical format'
    'force-unlock:Release a stuck lock on the current workspace'
    'get:Download and install modules for the configuration'
    'graph:Create a visual graph of Terraform resources'
    'import:Import existing infrastructure into Terraform'
    'login:Obtain and save credentials for a remote host'
    'logout:Remove locally stored credentials for a remote host'
    'output:Read an output from a state file'
    'providers:Prints a tree of the providers used in the configuration'
    'refresh:Update local state file against real resources'
    'show:Inspect Terraform state or plan'
    'state:Advanced state management'
    'taint:Manually mark a resource for recreation'
    'untaint:Manually unmark a resource as tainted'
    'version:Prints the Terraform version'
    'workspace:Workspace management'
  )
  _describe -t commands 'common terraform commands' cmds "$@"
}

_terraform_resource() {
  # TODO: do actual completion here
  _message "Terraform resource address"
}

_terraform-apply() {
  _arguments \
    '(:)-destroy[Destroy all resources]' \
    '(:)-refresh-only[Only update state to match remote resources]' \
    '(:)-refresh=[Update state prior to checking for differences]: :(false true)' \
    '(:)*-replace=[Force replacement of a resource]:resource:_terraform_resource' \
    '(:)*-target=[Resource to target]:resource:_terraform_resource' \
    '(:)*-var=[Set a variable in the Terraform configuration]:assignment' \
    '(:)-var-file=[Set variables in the configuration from a file]:path:_files' \
    '-auto-approve[Skip interactive approval of plan before applying]' \
    '-compact-warnings[Show warnings in more compact form]' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-input=[Ask for input for variables if not directly set]: :(false true)' \
    '-no-color[Suppress color in output]' \
    '-parallelism=[Limit the number of parallel resource operations]:n' \
    '::plan-file:_files'
}

_terraform-console() {
  _arguments \
    '-var=[Set a variable in the configuration]:assignment' \
    '-var-file=[Set variables from a file]:path:_files'
}

_terraform-destroy() {
  _arguments \
    '-refresh=[Update state prior to checking for differences]: :(false true)' \
    '*-target=[Resource to target]:resource:_terraform_resource' \
    '*-var=[Set a variable in the Terraform configuration]:assignment' \
    '-var-file=[Set variables in the configuration from a file]:path:_files' \
    '-auto-approve[Skip interactive approval of plan before applying]' \
    '-compact-warnings[Show warnings in more compact form]' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-input=[Ask for input for variables if not directly set]: :(false true)' \
    '-no-color[Suppress color in output]' \
    '-parallelism=[Limit the number of parallel resource operations]:n' \
}

_terraform-fmt() {
  _arguments \
    "-list=[Whether to list files whose formatting differs]: :(false true)" \
    '-write=[Whether to write to source files]: :(false true)' \
    '-diff[Display diffs of formatting changes]' \
    '-check[Check if the input is formatted]' \
    '-recursive[Also process files in subdirectories]' \
    '*::target:_files'
}

_terraform-get() {
  _arguments \
    '-update[Check already-downloaded modules for available updates]' \
    '-no-color[Disable text coloring in the output]'
}

_terraform-graph() {
  _arguments \
    '-plan=[Use specified plan file]:tfplan:_files' \
    '-draw-cycles[Highlight any cycles in the graph]' \
    '-module-depth=[Specifies the depth of the modules to show in the output]:n' \
    '-type=[Type of graph to output]:type:(plan plan-destroy apply validate input refresh)'
}

_terraform-import() {
  _arguments \
    '-config=[Path to config directory]:path:_files -/' \
    '-allow-missing-config[Allow import when no resource configuration exists]' \
    '-input=[Ask for input for variables if not directly set]: :(false true)' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-no-color[Suppress color in output]' \
    '*-var=[Set a variable in the Terraform configuration]:assignment' \
    '-var-file=[Set variables in the configuration from a file]:path:_files' \
    '-ignore-remote-version' \
    ':resource:_terraform_resource' \
    ':id'
}

_terraform-init() {
  _arguments \
    '-backend=[Configure backend]: :(false true)' \
    '*-backend-config=[Override for backend configuration]: : _alternative path\:path\:_files assignment\:assignment' \
    '-force-copy[Suppress prompts about copying state data]' \
    '-from-module=[Copy contents of the given module into target directory]:source:_files -/' \
    '-get=[Download any modules]: :(false true)' \
    '-input=[Ask for input if necessary]: :(false true)' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-no-color[Suppress color in output]' \
    '-plugin-dir=[Directory containing plugin binaries]:path:_files -/' \
    '-reconfigure[Reconfigure the backend]' \
    '-migrate-state[Attempt to migrate state to new backend]' \
    '-upgrade[Ignore previously installed objects and install latest]' \
    '-lockfile=[Set dependency lockfile mode]: :(readonly)' \
    '-ignore-remote-version[Ignore checking that local and remote versions are compatible]'
}

_terraform-login() {
  _arguments '::hostname:'
}

_terraform-logout() {
  _arguments '::hostname:'
}

_terraform-output() {
  _arguments \
    '-no-color[Suppress color in output' \
    '-raw[Print raw string directly if possible]' \
    ':output'
}

_terraform-plan() {
  _arguments \
    '-destroy[Generate plan to destroy all resources]' \
    '-refresh-only[Just check that remote objects match current state]' \
    '-refresh=[Update state prior to checking for differences]: :(false true)' \
    '*-replace=[Force replacement of a resource]:resource:_terraform_resource' \
    '*-target=[Resource to target]:resource:_terraform_resource' \
    '*-var=[Set a variable in the Terraform configuration]:assignment' \
    '-var-file=[Set variables in the configuration from a file]:path:_files' \
    '-compact-warnings[Show warnings in more compact form]' \
    '-detailed-exitcode[Return detailed exit codes when command exits]' \
    '-input=[Ask for input for variables if not directly set]: :(false true)' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-out=[Write a plan file to the given path]:path:_files' \
    '-no-color[Suppress color in output]' \
    '-parallelism=[Limit the number of parallel resource operations]:n'
}

_terraform-providers() {
  local context state state_descr line
  integer ret=1
  typeset -A opt_args
  local subcommands=(
    'lock:"Write out dependency locks"'
    'mirror:"Save local copies of providers"'
    'schema:"Show schemas for the providers used"'
  )

  _arguments -C ":subcommand: _describe -t commands subcommand subcommands" '*:: :->args' && ret=0

  if [[ $state = args ]]; then
    local oses=(linux darwin windows freebsd)
    local archs=(amd64 arm64 arm 386)
    case "${line[1]}" in
      lock)
        _arguments \
          '-fs-mirror=[Consult given filesystem mirror directory]:dir:_files -/' \
          '-net-mirror=[Consult the given network mirror]:url:_message url' \
          '-platform=[Choose target platform]:os_arch:_sep_parts oses _ archs'
        ;;
      mirror)
        _arguments '-platform=[Choose target platform]:os_arch:_sep_parts oses _ archs'
        ;;
      schema)
        (( CURRENT == 2 )) && compadd -- -json
        ;;
    esac
  fi
  return ret
}

_terraform-refresh() {
  _arguments \
    '-compact-warnings[Show warnings in more compact form]' \
    '-input=[Ask for input for variables if not directly set]: :(false true)' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-no-color[Suppress color in output]' \
    '*-target=[Resource to target]:resource:_terraform_resource' \
    '*-var=[Set a variable in the Terraform configuration]:assignment' \
    '-var-file=[Set variables in the configuration from a file]:path:_files'
}

_terraform-show() {
  _arguments \
    '-no-color[Suppres color in output]' \
    '-json[Print output as JSON]' \
    '::path:_files'
}

_terraform-taint() {
  _arguments \
    '-allow-missing[Succeed even if the resource is missing]' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-ignore-remote-version' \
    ':resource:_terraform_resource'
}

_terraform-untaint() {
  _arguments \
    '-allow-missing[Succeed even if the resource is missing]' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-ignore-remote-version' \
    ':resource:_terraform_resource'
}

_terraform-validate() {
  _arguments '-json[Print output as JSON]' '-no-color[suppress color output]'
}

_terraform-workspace() {
  if [[ $CURRENT -eq 2 ]]; then
    local cmds=(
      'delete:Delete a workspace'
      'list:List workspaces'
      'new:Create a workspace'
      'select:Select a workspace'
      'show:Show the name of the current workspace'
    )
    _describe -t commands 'workspace command' cmds
  else
    cmd=${words[2]}
    compset -n 2
    case $cmd in
      (new|delete)
        _arguments \
          '-lock=[Lock the state file]: :(false true)' \
          '-lock-timeout=[Duration to retry a state lock]:timeout' \
          ':name' '::dir:_files -/'
        ;;
      (list)
        [[ $CURRENT -eq 2 ]] && _files -/
        ;;
      (select)
        _arguments ':name' '::dir:_files -/'
        ;;
    esac
  fi
}

_terraform-force-unlock() {
  _arguments '-force[Skip confirmation input]' ':lock-id'
}

_terraform-state() {
  local context curcontext="$curcontext" state state_descr line
  integer ret=1
  typeset -A opt_args
  subcommands=(
    'list:List resources in the state'
    'mv:Move an item in the state'
    'pull:Pull current state and output to stdout'
    'push:Update remote state from a local state file'
    'replace-provider:Replace provider for resources'
    'rm:Remove instances from the state'
    'show:Show a resource in the state'
  )
  _arguments -C ":subcommand: _describe subcommand subcommands" '*:: :->args' && ret=0
  if [[ $state = args ]]; then
    curcontext="${curcontext%:*:*}:terraform-state-$line[1]:"
    _call_function ret _terraform-state-${line[1]} && ret=0
  fi
  return ret
}

_terraform-state-list() {
  _arguments \
    '-id=[Filter the results by id of instances]:ID' \
    '*:address:_terraform_resource'
}

_terraform-state-mv() {
  _arguments \
    '-dry-run[Print out what would be moved without actually moving anything]' \
    '-lock=[Lock the state files]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-ignore-remote-version' \
    ':source:_terraform_resource' ':destination:_terraform_resource'
}

_terraform-state-push() {
  _arguments \
    '-force[Force writing state regardless of lineage]' \
    '-lock=[Lock the state file]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    ':path:_files'
}

_terraform-state-rm() {
  _arguments \
    '-dry-run[Print out what would be removed without actually removing anything]' \
    '-lock=[Lock the state files]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-ignore-remote-version' \
    '*:address:_terraform_resource'
}

_terraform-state-show() {
  _arguments ':address:_terraform_resource'
}

_terraform-replace-provider() {
  _arguments \
    '-auto-approve[Skip interactive approval of plan before applying]' \
    '-lock=[Lock the state files]: :(false true)' \
    '-lock-timeout=[Duration to retry a state lock]:timeout' \
    '-ignore-remote-version' \
    ':from-provider-fqdn' ':to-provider-fqdn'
}

_terraform() {
  local context curcontext="$curcontext" state state_descr line
  integer ret=1
  typeset -A opt_args
  _arguments -C '(- :)-version' '(-)-help' \
    '-chdir=[Switch to different working directory]:dir:_files -/' \
    '1:command:_terraform_cmds' \
    '*:: :->args' && ret=0

  if [[ $state = args ]]; then
    curcontext="${curcontext%:*:*}:terraform-$line[1]:"
    _call_function ret _terraform-${line[1]} && ret=0
    (( ret )) && _message "no more arguments"
  fi

  return ret
}

_terraform "$@"
